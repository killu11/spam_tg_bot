import asyncio
import logging
import sys
import os

from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from database import Database
from aiogram import types
from keyboards import Buttons
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, ChatMemberUpdatedFilter, JOIN_TRANSITION
from aiogram.types import Message
from time import sleep


dotenv_path = os.path.join(os.path.dirname('bot_maksim'), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)


API_KEY = os.environ["API_KEY"]
if not API_KEY :
    raise ValueError('–õ–∏–±–æ –∞–ø–∏ –∫–ª—é—á —Å—Ç—É—Ö, –ª–∏–±–æ —Ç—ã –¥—É–±–∏–Ω–∞ –µ–≥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –Ω–µ –≤–≤–µ–ª –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ')

"""""
bot - –æ–±—ä–µ–∫—Ç, –¥–µ–ª–∞—é—â–∏–π —Ä–∞—Å—Å—ã–ª–∫—É 

Dispatcher - –æ–±—ä–µ–∫—Ç, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –±–æ—Ç–∞, –ø–µ—Ä–µ–¥–∞—é—â–∏–π —Å–æ–±—ã—Ç–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π.
"""""

bot = Bot(token = API_KEY, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


@dp.message(CommandStart())
async def start(message: Message) :

    db = Database()
    user_id = message.from_user.id
    if db.get_current_admin(user_id): ##—è–≤–ª—è–µ—Ç—Å—è –ª–∏ —é–∑–µ—Ä, –æ–±—Ä–∞—â–∞—é—â–∏–π—Å—è –∫ –±–æ—Ç—É –ê–î–ú–ò–ù–û–ú
        admin_keyboard = types.InlineKeyboardMarkup(inline_keyboard = [[Buttons.reboot_spam.value]]) ##–ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞
        
        await message.answer(text = f'–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {message.from_user.full_name}!\n{html.bold('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:')}', reply_markup = admin_keyboard)
        db.connect.close()

    else : 
        user_keyboard = types.InlineKeyboardMarkup(inline_keyboard= [[Buttons.info_about_creators.value]])##–ø–∞–Ω–µ–ª—å–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—è–≥–∏

        await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,{message.from_user.full_name}, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=user_keyboard)
        db.connect.close

@dp.callback_query()
async def get_contacts(callback_query: types.CallbackQuery):
    if callback_query.data == 'contact':
        await bot.send_message(chat_id = callback_query.from_user.id , text = '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ üëâ <a href = "https://t.me/Shinshilladmin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a>.')

@dp.callback_query()
async def start_spam_button(callback_query: types.CallbackQuery):
    try:
        db = Database()
        groups_id = db.read_groups()
        data_array = [item[0] for item in groups_id]
        db.connect.close()
        
        if callback_query.data == 'reboot_spam':
            await bot.send_message(chat_id = callback_query.from_user.id, text = '–†–∞—Å—Å—ã–ª–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞')
            while True:
                for id in data_array:
                    await bot.send_message(chat_id= id, text ='üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä –Ω–∞ PS4, PS5\n\n\
üí∏ –ü–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è PlayStation, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞, –ø–æ–∫—É–ø–∫–∞ –∏–≥—Ä\n\n\
ü§ì –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏, –∞–∫—Ü–∏–∏, –∫–æ–Ω–∫—É—Ä—Å—ã\n\n\
üòé –ü–µ—Ä–µ—Ö–æ–¥–∏ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è üëâ <a href = "https://t.me/ShinshillaPay">Shinshilla Pay</a>', parse_mode=ParseMode.HTML)
                    await asyncio.sleep(30)

    except TelegramForbiddenError:
            db = Database()
            db.delete_group(id)
            await bot.send_message(chat_id = '869803539', text = f'–ë—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–¥ —Å–ª–µ–¥—É—â–∏–π —á–∞—Ç: {id}')
        

@dp.my_chat_member(ChatMemberUpdatedFilter(member_status_changed = JOIN_TRANSITION))
async def add_to_chat(chat_member_updated: types.ChatMemberUpdated) :

    CMU = chat_member_updated
   
    if CMU.new_chat_member.status == 'member' and CMU.old_chat_member.status == 'left':
        try:
            db = Database()
            db.create_new_group(CMU.chat.id)
        except Exception as e:
            print(e)

        while True:
                await bot.send_message(chat_id= CMU.chat.id , text ='üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä –Ω–∞ PS4, PS5\n\n\
üí∏ –ü–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è PlayStation, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞, –ø–æ–∫—É–ø–∫–∞ –∏–≥—Ä\n\n\
ü§ì –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏, –∞–∫—Ü–∏–∏, –∫–æ–Ω–∫—É—Ä—Å—ã\n\n\
üòé –ü–µ—Ä–µ—Ö–æ–¥–∏ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è üëâ <a href = "https://t.me/ShinshillaPay">Shinshilla Pay</a>', parse_mode=ParseMode.HTML)
                await asyncio.sleep(30)


async def main() :
    await dp.start_polling(bot) 

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
